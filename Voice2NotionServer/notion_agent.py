from langchain.globals import set_debug, set_verbose
from langgraph.graph import Graph, StateGraph, END, MessagesState
from langgraph.prebuilt import ToolNode, tools_condition
from langchain_core.messages import HumanMessage, AIMessage, ToolMessage
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.tools import StructuredTool
from notion_client import AsyncClient
import asyncio
import os
from datetime import datetime
from dotenv import load_dotenv
from pydantic import BaseModel, Field
from notion_tools import (
    generate_and_cache_tool_metadata,
    load_tool_data,
    build_tools_from_data,
    NotionProperty,
    DatabaseEntryInput,
    PageTextInput,
)
import pytz

load_dotenv()

set_debug(True)
set_verbose(True)

# Define our state
class AgentState(MessagesState):
    pass

# Define our models
class CreateTaskInput(BaseModel):
    """Input schema for creating a new task"""
    properties: dict[str, NotionProperty] = Field(
        default_factory=lambda: {
            "Name": NotionProperty(
                type="title",
                value={"title": [{"text": {"content": "New Task"}}]}
            ),
            "Status": NotionProperty(
                type="status",
                value={"status": {"name": "Not started"}}
            ),
            "Priority": NotionProperty(
                type="select",
                value={"select": {"name": "Medium"}}
            )
        },
        description="Dictionary of property names to their values. Must include Name, Status, and Priority."
    )

class AddMovieInput(BaseModel):
    """Input schema for adding a movie to the watch list"""
    title: str = Field(..., description="Title of the movie")

async def create_new_task(task_input: CreateTaskInput) -> str:
    """Create a new task in the Notion database"""
    notion = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    page_id = os.getenv("NOTION_PAGE_ID")
    
    # Convert the properties to Notion's format
    properties = {}
    for name, prop in task_input.properties.items():
        properties[name] = prop.value
    
    response = await notion.pages.create(
        parent={"database_id": page_id},
        properties=properties
    )
    print(f"Created task in Notion: {response}")
    return "Created task in Notion."

async def add_to_movie_list(movie_input: AddMovieInput) -> str:
    """Add a movie to the Notion movie list"""
    notion = AsyncClient(auth=os.getenv("NOTION_TOKEN"))
    movie_db_id = os.getenv("NOTION_MOVIE_DATABASE_ID")
    if not movie_db_id:
        raise ValueError("NOTION_MOVIE_DATABASE_ID is not set")
    response = await notion.pages.create(
        parent={"database_id": movie_db_id},
        properties={
            "Name": {"title": [{"text": {"content": movie_input.title}}]}
        }
    )
    print(f"Added movie to Notion: {response}")
    return "Added movie to Notion."

# Load dynamic tool metadata generated by the preprocessing script
DATA_FILE = os.path.join(os.path.dirname(__file__), "notion_tools_data.json")
if os.path.exists(DATA_FILE):
    tool_data = load_tool_data(DATA_FILE)
    dynamic_tools = build_tools_from_data(tool_data)
else:
    # Fallback to generating and caching the metadata if the file is missing
    tool_data = asyncio.run(generate_and_cache_tool_metadata(DATA_FILE))
    dynamic_tools = build_tools_from_data(tool_data)

# Base tools provided by the application
base_tools = [
    StructuredTool.from_function(
        coroutine=create_new_task,
        name="create_new_task",
        description=(
            "Create a new task in the Notion database.\n"
            "Extract task details from natural language and fill the CreateTaskInput model.\n"
            "Guidelines:\n"
            "- Name: main action or objective\n"
            "- Priority: Today, ASAP, High, Medium, Low, People (default ASAP)\n"
            "- Due date: parse any date references\n"
            "- Tags: infer from context\n"
            "- Status: default 'Not started'\n"
            "- Size: infer if mentioned\n\n"
            "IMPORTANT: You must use the CreateTaskInput model when creating tasks. The model expects a dictionary of properties where each property is a NotionProperty object with:\n"
            "- type: The type of the property (e.g., 'title', 'status', 'select')\n"
            "- value: The property value formatted according to Notion's API structure\n"
            "If information is missing, apply sensible defaults. The current time is {current_time}."
        ),
    ),
    StructuredTool.from_function(
        coroutine=add_to_movie_list,
        name="add_to_movie_list",
        description="Add a movie to the Notion movie list",
    ),
]

# Final tool set combines static tools with dynamically generated ones
tools = base_tools + dynamic_tools
# Create the prompt
prompt = ChatPromptTemplate.from_messages([
    (
        "system",
        "You are a helpful assistant that can add data to a user's Notion workspace."
        " Use the available tools to create tasks or add movies as requested."
        " Choose the appropriate tool based on the user's prompt."
    ),
    MessagesPlaceholder(variable_name="messages"),
])

# Create the LLM
llm = ChatOpenAI(temperature=0, model="gpt-4o")
llm_with_tools = llm.bind_tools(tools)

def notion_chat(state: AgentState) -> AgentState:
    """Notion reasoning to create a task"""
    messages = state["messages"]
    response = llm_with_tools.invoke(prompt.format_messages(
        current_time=datetime.now(tz=pytz.timezone('America/Puerto_Rico')).strftime("%Y-%m-%d %H:%M:%S"),
        messages=messages
    ))

    return {
        "messages": [response]
    }



# Create the graph
workflow = StateGraph(AgentState)

# Add nodes
tool_node = ToolNode(tools=tools)
workflow.add_node("tools", tool_node)
workflow.add_node("notion_chat", notion_chat)
workflow.add_conditional_edges(
    "notion_chat",
    tools_condition
)
# Any time a tool is called, we return to the chatbot to decide the next step
workflow.add_edge("tools", "notion_chat")
workflow.set_entry_point("notion_chat")

workflow.add_edge("notion_chat", END)

# Compile the graph
chain = workflow.compile()

