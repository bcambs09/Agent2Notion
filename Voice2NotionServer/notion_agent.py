from langchain.globals import set_debug, set_verbose
from langgraph.graph import Graph, StateGraph, END, MessagesState
from langgraph.prebuilt import ToolNode, tools_condition
from langchain_core.messages import HumanMessage, AIMessage, ToolMessage
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.tools import StructuredTool
from notion_client import AsyncClient
import asyncio
import os
from datetime import datetime
from dotenv import load_dotenv
from langchain_core.pydantic_v1 import BaseModel, Field
from notion_tools import (
    generate_and_cache_tool_metadata,
    load_tool_data_from_env,
    build_tools_from_data
)
import pytz
from logging import getLogger

logger = getLogger(__name__)

load_dotenv()

set_debug(True)
set_verbose(True)

# Define our state
class AgentState(MessagesState):
    pass


# Load dynamic tool metadata generated by the preprocessing script
try:
    tool_data = load_tool_data_from_env()
    if not tool_data:
        raise ValueError("No tool data found")
except Exception as e:
    logger.error("Unable to load tool data: %s", e)
    DATA_FILE = os.path.join(os.path.dirname(__file__), "notion_tools_data.json")
    tool_data = asyncio.run(generate_and_cache_tool_metadata(DATA_FILE))

dynamic_tools = build_tools_from_data(tool_data)

# Base tools provided by the application
base_tools = []

# Final tool set combines static tools with dynamically generated ones
tools = base_tools + dynamic_tools
# Create the prompt
prompt = ChatPromptTemplate.from_messages([
    (
        "system",
        "You are a helpful assistant that can add data to a user's Notion workspace. "
        "Use the available tools to add data to the correct Notion page or database. "
        "Choose the appropriate tool based on the user's prompt. Current time is {current_time}."
    ),
    MessagesPlaceholder(variable_name="messages"),
])

# Create the LLM
llm = ChatOpenAI(temperature=0, model="gpt-4o")
llm_with_tools = llm.bind_tools(tools)

def notion_chat(state: AgentState) -> AgentState:
    """Notion reasoning to create a task"""
    messages = state["messages"]
    response = llm_with_tools.invoke(prompt.format_messages(
        current_time=datetime.now(tz=pytz.timezone('America/Puerto_Rico')).strftime("%Y-%m-%d %H:%M:%S"),
        messages=messages
    ))

    return {
        "messages": [response]
    }



# Create the graph
workflow = StateGraph(AgentState)

# Add nodes
tool_node = ToolNode(tools=tools)
workflow.add_node("tools", tool_node)
workflow.add_node("notion_chat", notion_chat)
workflow.add_conditional_edges(
    "notion_chat",
    tools_condition
)
# Any time a tool is called, we return to the chatbot to decide the next step
workflow.add_edge("tools", "notion_chat")
workflow.set_entry_point("notion_chat")

workflow.add_edge("notion_chat", END)

# Compile the graph
chain = workflow.compile()

